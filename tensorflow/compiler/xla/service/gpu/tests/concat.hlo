// RUN: hlo_to_llvm_ir %s | FileCheck %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = getelementptr inbounds i8, i8* %[[VAL_1:.*]], i64 0
// CHECK:         %[[VAL_2:.*]] = bitcast i8* %[[VAL_0]] to [1000 x float]*
// CHECK:         %[[VAL_3:.*]] = getelementptr inbounds i8, i8* %[[VAL_4:.*]], i64 0
// CHECK:         %[[VAL_5:.*]] = bitcast i8* %[[VAL_3]] to [1000 x float]*
// CHECK:         %[[VAL_6:.*]] = getelementptr inbounds i8, i8* %[[VAL_7:.*]], i64 0
// CHECK:         %[[VAL_8:.*]] = bitcast i8* %[[VAL_6]] to [1000 x float]*
// CHECK:         %[[VAL_9:.*]] = getelementptr inbounds i8, i8* %[[VAL_10:.*]], i64 0
// CHECK:         %[[VAL_11:.*]] = bitcast i8* %[[VAL_9]] to [1000 x float]*
// CHECK:         %[[VAL_12:.*]] = getelementptr inbounds i8, i8* %[[VAL_13:.*]], i64 0
// CHECK:         %[[VAL_14:.*]] = bitcast i8* %[[VAL_12]] to [1000 x float]*
// CHECK:         %[[VAL_15:.*]] = getelementptr inbounds i8, i8* %[[VAL_16:.*]], i64 0
// CHECK:         %[[VAL_17:.*]] = bitcast i8* %[[VAL_15]] to [1000 x float]*
// CHECK:         %[[VAL_18:.*]] = getelementptr inbounds i8, i8* %[[VAL_19:.*]], i64 0
// CHECK:         %[[VAL_20:.*]] = bitcast i8* %[[VAL_18]] to [1000 x float]*
// CHECK:         %[[VAL_21:.*]] = getelementptr inbounds i8, i8* %[[VAL_22:.*]], i64 0
// CHECK:         %[[VAL_23:.*]] = bitcast i8* %[[VAL_21]] to [1000 x float]*
// CHECK:         %[[VAL_24:.*]] = getelementptr inbounds i8, i8* %[[VAL_25:.*]], i64 0
// CHECK:         %[[VAL_26:.*]] = bitcast i8* %[[VAL_24]] to [1000 x float]*
// CHECK:         %[[VAL_27:.*]] = getelementptr inbounds i8, i8* %[[VAL_28:.*]], i64 0
// CHECK:         %[[VAL_29:.*]] = bitcast i8* %[[VAL_27]] to [1000 x float]*
// CHECK:         %[[VAL_30:.*]] = getelementptr inbounds i8, i8* %[[VAL_31:.*]], i64 0
// CHECK:         %[[VAL_32:.*]] = bitcast i8* %[[VAL_30]] to [1000 x float]*
// CHECK:         %[[VAL_33:.*]] = getelementptr inbounds i8, i8* %[[VAL_34:.*]], i64 0
// CHECK:         %[[VAL_35:.*]] = bitcast i8* %[[VAL_33]] to [11000 x half]*
// CHECK:         %[[VAL_36:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !2
// CHECK:         %[[VAL_37:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !3
// CHECK:         %[[VAL_38:.*]] = mul nuw nsw i32 %[[VAL_36]], 1024
// CHECK:         %[[VAL_39:.*]] = add nuw nsw i32 %[[VAL_38]], %[[VAL_37]]
// CHECK:         %[[VAL_40:.*]] = icmp ult i32 %[[VAL_39]], 11264
// CHECK:         call void @llvm.assume(i1 %[[VAL_40]])
// CHECK:         %[[VAL_41:.*]] = udiv i32 %[[VAL_39]], 1
// CHECK:         %[[VAL_42:.*]] = icmp ult i32 %[[VAL_39]], 11000
// CHECK:         br i1 %[[VAL_42]], label %[[VAL_43:.*]], label %[[VAL_44:.*]]
// CHECK:       fusion.in_bounds-after:                           ; preds = %[[VAL_45:.*]], %[[VAL_46:.*]]
// CHECK:         ret void
// CHECK:       fusion.in_bounds-true:                            ; preds = %[[VAL_46]]
// CHECK:         %[[VAL_47:.*]] = icmp ult i32 %[[VAL_41]], 1000
// CHECK:         br i1 %[[VAL_47]], label %[[VAL_48:.*]], label %[[VAL_49:.*]]
// CHECK:       concat_index_from_operand_id0:                    ; preds = %[[VAL_43]]
// CHECK:         %[[VAL_50:.*]] = phi i32 [ 0, %[[VAL_43]] ]
// CHECK:         %[[VAL_51:.*]] = sub nsw i32 %[[VAL_41]], %[[VAL_50]]
// CHECK:         %[[VAL_52:.*]] = getelementptr inbounds [1000 x float], [1000 x float]* %[[VAL_32]], i32 0, i32 %[[VAL_51]]
// CHECK:         %[[VAL_53:.*]] = load float, float* %[[VAL_52]], align 4, !invariant.load !4
// CHECK:         %[[VAL_54:.*]] = fptrunc float %[[VAL_53]] to half
// CHECK:         br label %[[VAL_45]]
// CHECK:       concat_index_from_operand_id1:                    ; preds = %[[VAL_49]]
// CHECK:         %[[VAL_55:.*]] = phi i32 [ 1000, %[[VAL_49]] ]
// CHECK:         %[[VAL_56:.*]] = sub nsw i32 %[[VAL_41]], %[[VAL_55]]
// CHECK:         %[[VAL_57:.*]] = getelementptr inbounds [1000 x float], [1000 x float]* %[[VAL_29]], i32 0, i32 %[[VAL_56]]
// CHECK:         %[[VAL_58:.*]] = load float, float* %[[VAL_57]], align 4, !invariant.load !4
// CHECK:         %[[VAL_59:.*]] = fptrunc float %[[VAL_58]] to half
// CHECK:         br label %[[VAL_45]]
// CHECK:       concat_index_from_operand_id2:                    ; preds = %[[VAL_60:.*]]
// CHECK:         %[[VAL_61:.*]] = phi i32 [ 2000, %[[VAL_60]] ]
// CHECK:         %[[VAL_62:.*]] = sub nsw i32 %[[VAL_41]], %[[VAL_61]]
// CHECK:         %[[VAL_63:.*]] = getelementptr inbounds [1000 x float], [1000 x float]* %[[VAL_26]], i32 0, i32 %[[VAL_62]]
// CHECK:         %[[VAL_64:.*]] = load float, float* %[[VAL_63]], align 4, !invariant.load !4
// CHECK:         %[[VAL_65:.*]] = fptrunc float %[[VAL_64]] to half
// CHECK:         br label %[[VAL_45]]
// CHECK:       concat_index_from_operand_id3:                    ; preds = %[[VAL_66:.*]]
// CHECK:         %[[VAL_67:.*]] = phi i32 [ 3000, %[[VAL_66]] ]
// CHECK:         %[[VAL_68:.*]] = sub nsw i32 %[[VAL_41]], %[[VAL_67]]
// CHECK:         %[[VAL_69:.*]] = getelementptr inbounds [1000 x float], [1000 x float]* %[[VAL_23]], i32 0, i32 %[[VAL_68]]
// CHECK:         %[[VAL_70:.*]] = load float, float* %[[VAL_69]], align 4, !invariant.load !4
// CHECK:         %[[VAL_71:.*]] = fptrunc float %[[VAL_70]] to half
// CHECK:         br label %[[VAL_45]]
// CHECK:       concat_index_from_operand_id4:                    ; preds = %[[VAL_72:.*]]
// CHECK:         %[[VAL_73:.*]] = phi i32 [ 4000, %[[VAL_72]] ]
// CHECK:         %[[VAL_74:.*]] = sub nsw i32 %[[VAL_41]], %[[VAL_73]]
// CHECK:         %[[VAL_75:.*]] = getelementptr inbounds [1000 x float], [1000 x float]* %[[VAL_20]], i32 0, i32 %[[VAL_74]]
// CHECK:         %[[VAL_76:.*]] = load float, float* %[[VAL_75]], align 4, !invariant.load !4
// CHECK:         %[[VAL_77:.*]] = fptrunc float %[[VAL_76]] to half
// CHECK:         br label %[[VAL_45]]
// CHECK:       concat_index_from_operand_id5:                    ; preds = %[[VAL_78:.*]]
// CHECK:         %[[VAL_79:.*]] = phi i32 [ 5000, %[[VAL_78]] ]
// CHECK:         %[[VAL_80:.*]] = sub nsw i32 %[[VAL_41]], %[[VAL_79]]
// CHECK:         %[[VAL_81:.*]] = getelementptr inbounds [1000 x float], [1000 x float]* %[[VAL_17]], i32 0, i32 %[[VAL_80]]
// CHECK:         %[[VAL_82:.*]] = load float, float* %[[VAL_81]], align 4, !invariant.load !4
// CHECK:         %[[VAL_83:.*]] = fptrunc float %[[VAL_82]] to half
// CHECK:         br label %[[VAL_45]]
// CHECK:       concat_index_from_operand_id6:                    ; preds = %[[VAL_84:.*]]
// CHECK:         %[[VAL_85:.*]] = phi i32 [ 6000, %[[VAL_84]] ]
// CHECK:         %[[VAL_86:.*]] = sub nsw i32 %[[VAL_41]], %[[VAL_85]]
// CHECK:         %[[VAL_87:.*]] = getelementptr inbounds [1000 x float], [1000 x float]* %[[VAL_14]], i32 0, i32 %[[VAL_86]]
// CHECK:         %[[VAL_88:.*]] = load float, float* %[[VAL_87]], align 4, !invariant.load !4
// CHECK:         %[[VAL_89:.*]] = fptrunc float %[[VAL_88]] to half
// CHECK:         br label %[[VAL_45]]
// CHECK:       concat_index_from_operand_id7:                    ; preds = %[[VAL_90:.*]]
// CHECK:         %[[VAL_91:.*]] = phi i32 [ 7000, %[[VAL_90]] ]
// CHECK:         %[[VAL_92:.*]] = sub nsw i32 %[[VAL_41]], %[[VAL_91]]
// CHECK:         %[[VAL_93:.*]] = getelementptr inbounds [1000 x float], [1000 x float]* %[[VAL_11]], i32 0, i32 %[[VAL_92]]
// CHECK:         %[[VAL_94:.*]] = load float, float* %[[VAL_93]], align 4, !invariant.load !4
// CHECK:         %[[VAL_95:.*]] = fptrunc float %[[VAL_94]] to half
// CHECK:         br label %[[VAL_45]]
// CHECK:       concat_index_from_operand_id8:                    ; preds = %[[VAL_96:.*]]
// CHECK:         %[[VAL_97:.*]] = phi i32 [ 8000, %[[VAL_96]] ]
// CHECK:         %[[VAL_98:.*]] = sub nsw i32 %[[VAL_41]], %[[VAL_97]]
// CHECK:         %[[VAL_99:.*]] = getelementptr inbounds [1000 x float], [1000 x float]* %[[VAL_8]], i32 0, i32 %[[VAL_98]]
// CHECK:         %[[VAL_100:.*]] = load float, float* %[[VAL_99]], align 4, !invariant.load !4
// CHECK:         %[[VAL_101:.*]] = fptrunc float %[[VAL_100]] to half
// CHECK:         br label %[[VAL_45]]
// CHECK:       concat_index_from_operand_id9:                    ; preds = %[[VAL_102:.*]]
// CHECK:         %[[VAL_103:.*]] = phi i32 [ 9000, %[[VAL_102]] ]
// CHECK:         %[[VAL_104:.*]] = sub nsw i32 %[[VAL_41]], %[[VAL_103]]
// CHECK:         %[[VAL_105:.*]] = getelementptr inbounds [1000 x float], [1000 x float]* %[[VAL_5]], i32 0, i32 %[[VAL_104]]
// CHECK:         %[[VAL_106:.*]] = load float, float* %[[VAL_105]], align 4, !invariant.load !4
// CHECK:         %[[VAL_107:.*]] = fptrunc float %[[VAL_106]] to half
// CHECK:         br label %[[VAL_45]]
// CHECK:       concat_index_from_operand_id10:                   ; preds = %[[VAL_108:.*]]
// CHECK:         %[[VAL_109:.*]] = phi i32 [ 10000, %[[VAL_108]] ]
// CHECK:         %[[VAL_110:.*]] = sub nsw i32 %[[VAL_41]], %[[VAL_109]]
// CHECK:         %[[VAL_111:.*]] = getelementptr inbounds [1000 x float], [1000 x float]* %[[VAL_2]], i32 0, i32 %[[VAL_110]]
// CHECK:         %[[VAL_112:.*]] = load float, float* %[[VAL_111]], align 4, !invariant.load !4
// CHECK:         %[[VAL_113:.*]] = fptrunc float %[[VAL_112]] to half
// CHECK:         br label %[[VAL_45]]
// CHECK:       concat_index_not_from_operand0:                   ; preds = %[[VAL_43]]
// CHECK:         %[[VAL_114:.*]] = icmp ult i32 %[[VAL_41]], 2000
// CHECK:         br i1 %[[VAL_114]], label %[[VAL_115:.*]], label %[[VAL_60]]
// CHECK:       concat_index_not_from_operand1:                   ; preds = %[[VAL_49]]
// CHECK:         %[[VAL_116:.*]] = icmp ult i32 %[[VAL_41]], 3000
// CHECK:         br i1 %[[VAL_116]], label %[[VAL_117:.*]], label %[[VAL_66]]
// CHECK:       concat_index_not_from_operand2:                   ; preds = %[[VAL_60]]
// CHECK:         %[[VAL_118:.*]] = icmp ult i32 %[[VAL_41]], 4000
// CHECK:         br i1 %[[VAL_118]], label %[[VAL_119:.*]], label %[[VAL_72]]
// CHECK:       concat_index_not_from_operand3:                   ; preds = %[[VAL_66]]
// CHECK:         %[[VAL_120:.*]] = icmp ult i32 %[[VAL_41]], 5000
// CHECK:         br i1 %[[VAL_120]], label %[[VAL_121:.*]], label %[[VAL_78]]
// CHECK:       concat_index_not_from_operand4:                   ; preds = %[[VAL_72]]
// CHECK:         %[[VAL_122:.*]] = icmp ult i32 %[[VAL_41]], 6000
// CHECK:         br i1 %[[VAL_122]], label %[[VAL_123:.*]], label %[[VAL_84]]
// CHECK:       concat_index_not_from_operand5:                   ; preds = %[[VAL_78]]
// CHECK:         %[[VAL_124:.*]] = icmp ult i32 %[[VAL_41]], 7000
// CHECK:         br i1 %[[VAL_124]], label %[[VAL_125:.*]], label %[[VAL_90]]
// CHECK:       concat_index_not_from_operand6:                   ; preds = %[[VAL_84]]
// CHECK:         %[[VAL_126:.*]] = icmp ult i32 %[[VAL_41]], 8000
// CHECK:         br i1 %[[VAL_126]], label %[[VAL_127:.*]], label %[[VAL_96]]
// CHECK:       concat_index_not_from_operand7:                   ; preds = %[[VAL_90]]
// CHECK:         %[[VAL_128:.*]] = icmp ult i32 %[[VAL_41]], 9000
// CHECK:         br i1 %[[VAL_128]], label %[[VAL_129:.*]], label %[[VAL_102]]
// CHECK:       concat_index_not_from_operand8:                   ; preds = %[[VAL_96]]
// CHECK:         %[[VAL_130:.*]] = icmp ult i32 %[[VAL_41]], 10000
// CHECK:         br i1 %[[VAL_130]], label %[[VAL_131:.*]], label %[[VAL_108]]
// CHECK:       concat_index_not_from_operand9:                   ; preds = %[[VAL_102]]
// CHECK:         %[[VAL_132:.*]] = icmp ult i32 %[[VAL_41]], 11000
// CHECK:         br i1 %[[VAL_132]], label %[[VAL_133:.*]], label %[[VAL_134:.*]]
// CHECK:       concat_index_not_from_operand10:                  ; preds = %[[VAL_108]]
// CHECK:         unreachable
// CHECK:       concatenate.23.merge:                             ; preds = %[[VAL_133]], %[[VAL_131]], %[[VAL_129]], %[[VAL_127]], %[[VAL_125]], %[[VAL_123]], %[[VAL_121]], %[[VAL_119]], %[[VAL_117]], %[[VAL_115]], %[[VAL_48]]
// CHECK:         %[[VAL_135:.*]] = phi half [ %[[VAL_54]], %[[VAL_48]] ], [ %[[VAL_59]], %[[VAL_115]] ], [ %[[VAL_65]], %[[VAL_117]] ], [ %[[VAL_71]], %[[VAL_119]] ], [ %[[VAL_77]], %[[VAL_121]] ], [ %[[VAL_83]], %[[VAL_123]] ], [ %[[VAL_89]], %[[VAL_125]] ], [ %[[VAL_95]], %[[VAL_127]] ], [ %[[VAL_101]], %[[VAL_129]] ], [ %[[VAL_107]], %[[VAL_131]] ], [ %[[VAL_113]], %[[VAL_133]] ]
// CHECK:         %[[VAL_136:.*]] = bitcast [11000 x half]* %[[VAL_35]] to half*
// CHECK:         %[[VAL_137:.*]] = getelementptr inbounds half, half* %[[VAL_136]], i32 %[[VAL_39]]
// CHECK:         store half %[[VAL_135]], half* %[[VAL_137]], align 2
// CHECK:         br label %[[VAL_44]]

HloModule module

%fused_computation (param_0.1: f32[1000], param_1.2: f32[1000], param_2.3: f32[1000], param_3.4: f32[1000], param_4.5: f32[1000], param_5.6: f32[1000], param_6.7: f32[1000], param_7.8: f32[1000], param_8.9: f32[1000], param_9.10: f32[1000], param_10.11: f32[1000]) -> f16[11000] {
  %param_10.11 = f32[1000]{0} parameter(10)
  %converted0.1 = f16[1000]{0} convert(f32[1000]{0} %param_10.11)
  %param_9.10 = f32[1000]{0} parameter(9)
  %converted1.1 = f16[1000]{0} convert(f32[1000]{0} %param_9.10)
  %param_8.9 = f32[1000]{0} parameter(8)
  %converted2.1 = f16[1000]{0} convert(f32[1000]{0} %param_8.9)
  %param_7.8 = f32[1000]{0} parameter(7)
  %converted3.1 = f16[1000]{0} convert(f32[1000]{0} %param_7.8)
  %param_6.7 = f32[1000]{0} parameter(6)
  %converted4.1 = f16[1000]{0} convert(f32[1000]{0} %param_6.7)
  %param_5.6 = f32[1000]{0} parameter(5)
  %converted5.1 = f16[1000]{0} convert(f32[1000]{0} %param_5.6)
  %param_4.5 = f32[1000]{0} parameter(4)
  %converted6.1 = f16[1000]{0} convert(f32[1000]{0} %param_4.5)
  %param_3.4 = f32[1000]{0} parameter(3)
  %converted7.1 = f16[1000]{0} convert(f32[1000]{0} %param_3.4)
  %param_2.3 = f32[1000]{0} parameter(2)
  %converted8.1 = f16[1000]{0} convert(f32[1000]{0} %param_2.3)
  %param_1.2 = f32[1000]{0} parameter(1)
  %converted9.1 = f16[1000]{0} convert(f32[1000]{0} %param_1.2)
  %param_0.1 = f32[1000]{0} parameter(0)
  %converted10.1 = f16[1000]{0} convert(f32[1000]{0} %param_0.1)
  ROOT %out.1 = f16[11000]{0} concatenate(f16[1000]{0} %converted0.1, f16[1000]{0} %converted1.1, f16[1000]{0} %converted2.1, f16[1000]{0} %converted3.1, f16[1000]{0} %converted4.1, /*index=5*/f16[1000]{0} %converted5.1, f16[1000]{0} %converted6.1, f16[1000]{0} %converted7.1, f16[1000]{0} %converted8.1, f16[1000]{0} %converted9.1, /*index=10*/f16[1000]{0} %converted10.1), dimensions={0}
}

ENTRY %computation (p0: f32[1000], p1: f32[1000], p2: f32[1000], p3: f32[1000], p4: f32[1000], p5: f32[1000], p6: f32[1000], p7: f32[1000], p8: f32[1000], p9: f32[1000], p10: f32[1000]) -> f16[11000] {
  %p10 = f32[1000]{0} parameter(10)
  %p9 = f32[1000]{0} parameter(9)
  %p8 = f32[1000]{0} parameter(8)
  %p7 = f32[1000]{0} parameter(7)
  %p6 = f32[1000]{0} parameter(6)
  %p5 = f32[1000]{0} parameter(5)
  %p4 = f32[1000]{0} parameter(4)
  %p3 = f32[1000]{0} parameter(3)
  %p2 = f32[1000]{0} parameter(2)
  %p1 = f32[1000]{0} parameter(1)
  %p0 = f32[1000]{0} parameter(0)
  ROOT %fusion = f16[11000]{0} fusion(f32[1000]{0} %p10, f32[1000]{0} %p9, f32[1000]{0} %p8, f32[1000]{0} %p7, f32[1000]{0} %p6, /*index=5*/f32[1000]{0} %p5, f32[1000]{0} %p4, f32[1000]{0} %p3, f32[1000]{0} %p2, f32[1000]{0} %p1, /*index=10*/f32[1000]{0} %p0), kind=kLoop, calls=%fused_computation
}

